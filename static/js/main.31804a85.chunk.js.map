{"version":3,"sources":["components/form/InputForm.tsx","components/title/title.tsx","components/sentences/OneCard.tsx","components/sentences/Sentences.tsx","components/container/sentence-game.tsx","components/container/index.ts","components/store/actions/action-creators.ts","components/store/actions/types.ts","components/store/reducers/mainReducer.ts","components/store/reducers/rootReducer.ts","components/store/store.ts","App.js","index.js"],"names":["InputForms","updateWho","updateWhat","updateWhen","updateWhere","publicateStory","updateAuthor","eraseSentence","useForm","register","handleSubmit","errors","reset","useState","who","what","when","where","author","values","setValues","updatesHandler","e","target","name","value","DigitsChecker","autoComplete","onSubmit","className","type","placeholder","ref","required","pattern","message","onChange","minLength","Title","Fragment","OneCard","text","removeStory","onClick","Sentences","published","length","arrayOfSentences","map","oneSentense","key","id","SentenceGame","this","props","React","Component","connect","state","sentence","sentencePage","payload","initialState","Reducer","action","idPublCount","first","toString","second","third","forth","by","filter","rootReducer","combineReducers","mainReducer","store","createStore","subscribe","console","log","getState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31804a85.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport './InputForm.css'\r\nimport { SentenceType } from '../store/reducers/mainReducer';\r\n\r\ntype FormData = {\r\n    who: string,\r\n    what: string,\r\n    when: string,\r\n    where: string,\r\n    author: string\r\n}\r\ntype InputFormsPropsType = {\r\n    updateWho: (value: string) => void, \r\n    updateWhat: (value: string) => void, \r\n    updateWhen: (value: string) => void, \r\n    updateWhere: (value: string) => void, \r\n    updateAuthor: (value: string) => void, \r\n    eraseSentence: () => void, \r\n    publicateStory: () => void,\r\n}\r\n\r\nconst InputForms: React.FC<InputFormsPropsType> = (\r\n    {updateWho, updateWhat, updateWhen, \r\n        updateWhere, publicateStory, updateAuthor, eraseSentence}\r\n        ) => {\r\n    const { register, handleSubmit, errors, reset } = useForm<FormData>();\r\n    const [values, setValues] = useState<SentenceType>({\r\n        who: \"\",\r\n        what: \"\",\r\n        when: \"\",\r\n        where: \"\",\r\n        author: \"Stranger\"\r\n    })\r\n\r\n    const updatesHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        })\r\n        switch (name) {\r\n            case \"who\":\r\n                updateWho(value)\r\n            break\r\n            case \"what\":\r\n                updateWhat(value)\r\n            break\r\n            case \"when\":\r\n                updateWhen(value)\r\n            break\r\n            case \"where\":\r\n                updateWhere(value)\r\n            break\r\n            case \"author\":\r\n                let authorship = value ? value : \"Stranger\"\r\n                updateAuthor(authorship)\r\n            break\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    const submitForm = () => {\r\n        publicateStory()\r\n        eraseSentence()\r\n        setValues({\r\n            who: \"\",\r\n            what: \"\",\r\n            when: \"\",\r\n            where: \"\",\r\n            author: \"Stranger\"\r\n        })\r\n        reset()\r\n    }\r\n    const DigitsChecker = /[a-z]{1,10}/\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit = {handleSubmit(submitForm)}>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control\" name = \"who\" placeholder = \"who ?\" \r\n                    ref = {register({\r\n                        required: \"Who is a main character?\", \r\n                        pattern: {value: DigitsChecker, message: \"No symbols or digits only are welcome here\"}\r\n                    })} onChange = {updatesHandler}/>\r\n                {errors.who && <p className = \"errorMsg\">{errors.who.message}</p>}\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control\" name = \"what\" placeholder = \"what ?\" \r\n                    ref = {register({\r\n                        required: \"What is a story without main action?\",\r\n                        minLength: {value: 2, message: \"Whoa! And you call it an action?\"},\r\n                        pattern: {value: DigitsChecker, message: \"No symbols or digits only are welcome here\"}\r\n                    })} onChange = {updatesHandler}/>\r\n                {errors.what && <p className = \"errorMsg\">{errors.what.message}</p>}    \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control\" name = \"when\" placeholder = \"when ?\" \r\n                    ref = {register({\r\n                        required: \"Please tell us when? Or any other condition?\",\r\n                        minLength: {value: 2, message: `Hm. It doesn't look like \"when\"...`},\r\n                        pattern: {value: DigitsChecker, message: \"No only digits are welcome here\"}\r\n                    })} onChange = {updatesHandler} />\r\n                {errors.when && <p className = \"errorMsg\">{errors.when.message}</p>}  \r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control\" name = \"where\" placeholder = \"where ?\" \r\n                    ref = {register({\r\n                        required: \"Everyone will want to know where it happened for sure!\",\r\n                        minLength: {value: 3, message: \"I don't know such place...\"},\r\n                        pattern: {value: DigitsChecker, message: \"No only digits are welcome here\"}\r\n                    })} onChange = {updatesHandler}/>\r\n                {errors.where && <p className = \"errorMsg\">{errors.where.message}</p>}  \r\n            </div>\r\n            <h6>It will looks like: \r\n                <div className = \"example\">\r\n                    <span className = \"colored\">\"</span>\r\n                        {values.who || values.what || values.when || values.where\r\n                            ? `${values.who} ${values.what} ${values.when} ${values.where}`\r\n                            : \"Ex.:Jack built a house today in the forest\"\r\n                        }  \r\n                    <span className = \"colored\">\"</span>\r\n                    <p className = \"errorMsg\">\r\n                        {errors.who || errors.what || errors.when || errors.where \r\n                            ? `PS: You can do it better!` \r\n                            : null\r\n                        }\r\n                    </p>\r\n                </div>\r\n            </h6>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control\" name = \"author\" placeholder = \"your name for authorship?\" onChange = {updatesHandler} />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-info\">done</button>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default InputForms","import React from 'react'\r\nimport './title.css'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <h3>Hey ho<span className = \"colored\">!</span></h3>\r\n            <h5 className = \"body\">Let's write some <span className = \"ss\">Short Stories...</span>\r\n                <span className = \"colored\">*</span></h5>\r\n            <p className = \"ps\">\r\n                <span className = \"colored\">*</span>\r\n                yeah, like Hemingway but more fun or based on facts maybe</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Title\r\n\r\n","import React from 'react'\r\nimport { FaTimesCircle } from \"react-icons/fa\";\r\n\r\nimport './CardContainer.css'\r\n\r\ntype OneCardPropsType = {\r\n    text: string,\r\n    author: string,\r\n    removeStory: () => void\r\n}\r\n\r\nconst OneCard: React.FC<OneCardPropsType> = ({ text, author, removeStory }) => {\r\n    const onRemove = () => {\r\n        removeStory()\r\n    }\r\n    return (\r\n        <div className=\"col-4\">\r\n            <div className=\"card\" >\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">\r\n                        {text}\r\n                    </p>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    {`by ${author}`}\r\n                    <button type=\"button\"\r\n                        className=\"btn btn-sm float-right\">\r\n                            <FaTimesCircle className=\"icon\" onClick = {onRemove} />\r\n                    </button>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default OneCard","import React from 'react'\r\nimport OneCard from './OneCard'\r\n\r\nimport './CardContainer.css'\r\nimport { PublishedType } from '../store/reducers/mainReducer'\r\n\r\ntype SentencesPropsType = {\r\n    published: Array<PublishedType>,\r\n    removeStory: (value: number) => void\r\n}\r\n\r\nconst Sentences: React.FC<SentencesPropsType> = ({ published, removeStory }) => {\r\n    if(published.length === 0) {\r\n        return null\r\n    }\r\n    const arrayOfSentences = published.map((oneSentense) =>\r\n        <OneCard key={oneSentense.id} text={oneSentense.text} author={oneSentense.author} \r\n            removeStory = {() => removeStory(oneSentense.id)} />)\r\n    return (\r\n        <div className=\"container\">\r\n            <hr />\r\n            <div className=\"row\">\r\n                {arrayOfSentences}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sentences","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport InputForms from '../form/InputForm'\r\nimport Title from '../title/title'\r\nimport Sentences from '../sentences/Sentences'\r\nimport { updateWho, updateWhat, updateWhen, updateWhere, eraseSentence, \r\n    publicateStory, removeStory, updateAuthor } from '../store/actions/action-creators'\r\nimport { SentenceType, PublishedType } from '../store/reducers/mainReducer'\r\nimport { AppStateType } from '../store/reducers/rootReducer'\r\n\r\ntype MapStateToPropsType = {\r\n    sentence: SentenceType,\r\n    published: Array<PublishedType>\r\n}\r\ntype mapDispatchToPropsType = {\r\n    updateWho: (value: string) => void, \r\n    updateWhat: (value: string) => void, \r\n    updateWhen: (value: string) => void, \r\n    updateWhere: (value: string) => void, \r\n    updateAuthor: (value: string) => void, \r\n    eraseSentence: () => void, \r\n    publicateStory: () => void, \r\n    removeStory: (value: number) => void\r\n}\r\ntype PropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\nclass SentenceGame extends React.Component<PropsType> {\r\n    render() {\r\n        const {updateWho, updateWhat, updateWhen, updateWhere, \r\n            publicateStory, updateAuthor, eraseSentence} = this.props\r\n        return (\r\n            <React.Fragment>\r\n                <Title />\r\n                <InputForms updateWho = {updateWho} updateWhat = {updateWhat} \r\n                    updateWhen = {updateWhen} updateWhere = {updateWhere} \r\n                    updateAuthor = {updateAuthor} publicateStory = {publicateStory} \r\n                    eraseSentence = {eraseSentence}/>\r\n                <Sentences published = {this.props.published} removeStory = {this.props.removeStory} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        sentence: state.sentencePage.sentence,\r\n        published: state.sentencePage.published\r\n    }\r\n}\r\n// const mapDispatchToProps = (dispatch) => {\r\n//     return {\r\n//         updateWho: (value) => dispatch(updateWho(value)),\r\n//         updateWhat: (value) => dispatch(updateWhat(value)),\r\n//         updateWhen: (value) => dispatch(updateWhen(value)),\r\n//         updateWhere: (value) => dispatch(updateWhere(value)),\r\n//         updateAuthor: (value) => dispatch(updateAuthor(value)),\r\n//         publicateStory: () => dispatch(publicateStory()),\r\n//         removeStory: (value) => dispatch(removeStory(value))\r\n//     }\r\n// }\r\n\r\nexport default connect(mapStateToProps, {updateWho, updateWhat, updateWhen, updateWhere, \r\n    updateAuthor, eraseSentence, publicateStory, removeStory})(SentenceGame)","import SentenceGame from './sentence-game'\r\n\r\nexport default SentenceGame","import { UPDATE_WHO, UPDATE_WHAT, UPDATE_WHEN, UPDATE_WHERE, AUTHOR_UPDATE, \r\n    PUBLICATE_STORY, REMOVE_STORY, ERASE_SENTENCE } from \"./types\"\r\n\r\nexport type UpdateWhoType = {\r\n    type: typeof UPDATE_WHO,\r\n    payload: string\r\n}\r\nexport type UpdateWhatType = {\r\n    type: typeof UPDATE_WHAT,\r\n    payload: string\r\n}\r\nexport type UpdateWhenType = {\r\n    type: typeof UPDATE_WHEN,\r\n    payload: string\r\n}\r\nexport type UpdateWhereType = {\r\n    type: typeof UPDATE_WHERE,\r\n    payload: string\r\n}\r\nexport type UpdateAuthorType = {\r\n    type: typeof AUTHOR_UPDATE,\r\n    payload: string\r\n}\r\nexport type EraseSentenceType = {\r\n    type: typeof ERASE_SENTENCE\r\n}\r\nexport type PublicateStoryType = {\r\n    type: typeof PUBLICATE_STORY\r\n}\r\nexport type RemoveStoryType = {\r\n    type: typeof REMOVE_STORY,\r\n    payload: number\r\n}\r\n\r\nexport const updateWho = (who: string): UpdateWhoType => {\r\n    return {\r\n        type: UPDATE_WHO,\r\n        payload: who\r\n    }\r\n}\r\nexport const updateWhat = (what: string): UpdateWhatType => {\r\n    return {\r\n        type: UPDATE_WHAT,\r\n        payload: what\r\n    }\r\n}\r\nexport const updateWhen = (when: string): UpdateWhenType => {\r\n    return {\r\n        type: UPDATE_WHEN,\r\n        payload: when\r\n    }\r\n}\r\nexport const updateWhere = (where: string): UpdateWhereType => {\r\n    return {\r\n        type: UPDATE_WHERE,\r\n        payload: where\r\n    }\r\n}\r\n\r\nexport const updateAuthor = (author: string): UpdateAuthorType => {\r\n    return {\r\n        type: AUTHOR_UPDATE,\r\n        payload: author\r\n    }\r\n}\r\n\r\nexport const eraseSentence = (): EraseSentenceType => {\r\n    return {\r\n        type: ERASE_SENTENCE\r\n    }\r\n}\r\n\r\nexport const publicateStory = (): PublicateStoryType => {\r\n    return {\r\n        type: PUBLICATE_STORY\r\n    }\r\n}\r\n\r\nexport const removeStory = (id: number): RemoveStoryType => {\r\n    return {\r\n        type: REMOVE_STORY,\r\n        payload: id\r\n    }\r\n}","export const UPDATE_WHO = \"UPDATE_WHO\"\r\nexport const UPDATE_WHAT = \"UPDATE_WHAT\"\r\nexport const UPDATE_WHEN = \"UPDATE_WHEN\"\r\nexport const UPDATE_WHERE = \"UPDATE_WHERE\"\r\nexport const AUTHOR_UPDATE = \"AUTHOR_UPDATE\"\r\nexport const ERASE_SENTENCE = \"ERASE_SENTENCE\"\r\n\r\nexport const PUBLICATE_STORY = \"PUBLICATE_STORY\"\r\nexport const REMOVE_STORY = \"REMOVE_STORY\"\r\n\r\n","import { UPDATE_WHO, UPDATE_WHAT, UPDATE_WHEN, UPDATE_WHERE, \r\n    PUBLICATE_STORY, AUTHOR_UPDATE, REMOVE_STORY, ERASE_SENTENCE } from \"../actions/types\"\r\nimport { UpdateWhoType, UpdateWhatType, UpdateWhenType, UpdateWhereType, UpdateAuthorType, EraseSentenceType, PublicateStoryType, RemoveStoryType } from \"../actions/action-creators\"\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type SentenceType = {\r\n    who: string,\r\n    what: string,\r\n    when: string,\r\n    where: string,\r\n    author: string\r\n}\r\nexport type PublishedType = {\r\n    id: number\r\n    text: string\r\n    author: string\r\n}\r\ntype ActionsType = UpdateWhoType | UpdateWhatType | UpdateWhenType | UpdateWhereType |\r\n    UpdateAuthorType | EraseSentenceType | PublicateStoryType | RemoveStoryType\r\n\r\nconst initialState = {\r\n    sentence: {\r\n        who: \"Jack\",\r\n        what: \"built a house\",\r\n        when: \"today\",\r\n        where: \"in the forest\",\r\n        author: \"Stranger\"\r\n    } as SentenceType,\r\n    published: [\r\n        {\r\n            id: 0,\r\n            text: \"John Galt invented the perpetual motion machine some time ago in one book\",\r\n            author: \"Anton Cheremnykh\"\r\n        },\r\n        {\r\n            id: 1,\r\n            text: \"Kim Jong-un didn't celebrate his grandfather's Bday last time in Pyongyang\",\r\n            author: \"Anton Cheremnykh\"\r\n        }\r\n\r\n    ] as Array<PublishedType>\r\n\r\n}\r\n\r\nconst Reducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    let idPublCount = state.published.length\r\n    switch (action.type) {\r\n        case UPDATE_WHO:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    ...state.sentence,\r\n                    who: action.payload\r\n                }\r\n            }\r\n        case UPDATE_WHAT:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    ...state.sentence,\r\n                    what: action.payload\r\n                }\r\n            }\r\n        case UPDATE_WHEN:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    ...state.sentence,\r\n                    when: action.payload\r\n                }\r\n            }\r\n        case UPDATE_WHERE:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    ...state.sentence,\r\n                    where: action.payload\r\n                }\r\n            }\r\n        case AUTHOR_UPDATE:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    ...state.sentence,\r\n                    author: action.payload\r\n                }\r\n            }\r\n        case PUBLICATE_STORY:\r\n            const { who, what, when, where, author } = state.sentence\r\n            let first = who.toString()\r\n            let second = what.toString()\r\n            let third = when.toString()\r\n            let forth = where.toString()\r\n            let by = author.toString()\r\n            let text = `${first} ${second} ${third} ${forth}`\r\n            return {\r\n                ...state,\r\n                published: [...state.published, {\r\n                    id: idPublCount,\r\n                    text,\r\n                    author: by\r\n                }]\r\n            }\r\n        case ERASE_SENTENCE:\r\n            return {\r\n                ...state,\r\n                sentence: {\r\n                    who: \"\",\r\n                    what: \"\",\r\n                    when: \"\",\r\n                    where: \"\",\r\n                    author: \"Stranger\"\r\n                }\r\n            }\r\n\r\n        case REMOVE_STORY:\r\n            return {\r\n                ...state,\r\n                published: state.published.filter(({id}) => id !== action.payload)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default Reducer","import { combineReducers } from \"redux\";\r\nimport mainReducer from \"./mainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    sentencePage: mainReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport default rootReducer","import { createStore } from \"redux\"\r\nimport rootReducer from \"./reducers/rootReducer\"\r\n\r\nconst store = createStore(rootReducer)\r\nstore.subscribe(() => {\r\n    console.log(store.getState())\r\n})\r\n\r\nexport default store","import React from 'react';\nimport './App.css';\nimport SentenceGame from './components/container/';\nimport { Provider } from 'react-redux';\nimport store from './components/store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n          <SentenceGame />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}